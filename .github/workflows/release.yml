name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux targets
          - target: x86_64-unknown-linux-gnu
            name: weld-mcp-server-linux-amd64
            runner: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            name: weld-mcp-server-linux-arm
            runner: ubuntu-24.04-arm
          # macOS targets
          - target: x86_64-apple-darwin
            name: weld-mcp-server-darwin-amd64
            runner: macos-13
          - target: aarch64-apple-darwin
            name: weld-mcp-server-darwin-arm
            runner: macos-latest
          # Windows targets
          - target: x86_64-pc-windows-msvc
            name: weld-mcp-server-windows-amd64.exe
            runner: windows-latest
          - target: aarch64-pc-windows-msvc
            name: weld-mcp-server-windows-arm64.exe
            runner: windows-11-arm

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Sccache Action
        uses: Mozilla-Actions/sccache-action@v0.0.9

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}

      - name: Add WASM target
        run: rustup target add wasm32-wasip2

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary (Unix)
        if: "!contains(matrix.target, 'windows')"
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }}.tar.gz weld-mcp-server
          cd -

      - name: Prepare binary (Windows)
        if: contains(matrix.target, 'windows')
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }}.zip weld-mcp-server.exe
          cd -
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: |
            ${{ matrix.name }}.tar.gz
            ${{ matrix.name }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.zip" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: release-assets/*
          body: |
            ## Downloads

            ### Linux
            - [AMD64 (tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-linux-amd64.tar.gz)
            - [ARM64 (tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-linux-arm64.tar.gz)

            ### macOS (Darwin)
            - [AMD64/Intel (tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-darwin-amd64.tar.gz)
            - [ARM64/Apple Silicon (tar.gz)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-darwin-arm64.tar.gz)

            ### Windows
            - [AMD64 (zip)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-windows-amd64.exe.zip)
            - [ARM64 (zip)](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/weld-mcp-server-windows-arm64.exe.zip)

            ## Install

            ### All Platforms (Shell Script)

            ```bash
            curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
            ```

            This will detect your platform and install the latest `weld-mcp-server` binary to your `$PATH`.

            ## Usage
            ```bash
            # Start the MCP server
            weld-mcp-server serve --http --policy-file policy.yaml
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
